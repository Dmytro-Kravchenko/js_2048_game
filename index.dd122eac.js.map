{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/grid.class.js","src/modules/cell.class.js","src/modules/tile.class.js"],"sourcesContent":["class $3288372969523c40$export$f6f0c3fe4ec306ea {\n    constructor(gridElement, x, y, grid){\n        const cell = document.createElement(\"div\");\n        cell.classList.add(\"field-cell\");\n        gridElement.append(cell);\n        this.x = x;\n        this.y = y;\n        this.grid = grid;\n    }\n    linkTile(tile) {\n        tile.setXY(this.x, this.y);\n        this.linkedTile = tile;\n    }\n    linkTileForMerge(tile) {\n        tile.setXY(this.x, this.y);\n        this.linkedTileForMerge = tile;\n    }\n    canAccept(newTile) {\n        return !this.linkedTile || !this.linkedTileForMerge && this.linkedTile.value === newTile.value;\n    }\n    mergeTiles() {\n        const mergedValue = this.linkedTile.value + this.linkedTileForMerge.value;\n        this.linkedTile.setValue(mergedValue);\n        this.linkedTileForMerge.removeFromDOM();\n        this.linkedTileForMerge = null;\n        this.grid.updateTotalScore(mergedValue);\n        return this.score += mergedValue;\n    }\n}\n\n\nconst $100a143637f3f2f4$var$GRID_SIZE = 4;\nconst $100a143637f3f2f4$var$TOTAL_CELLS = $100a143637f3f2f4$var$GRID_SIZE * $100a143637f3f2f4$var$GRID_SIZE;\nclass $100a143637f3f2f4$export$ef2184bd89960b14 {\n    constructor(gridElement){\n        this.cells = [];\n        this.totalScore = 0;\n        for(let i = 0; i < $100a143637f3f2f4$var$TOTAL_CELLS; i++)this.cells.push(new (0, $3288372969523c40$export$f6f0c3fe4ec306ea)(gridElement, i % $100a143637f3f2f4$var$GRID_SIZE, Math.floor(i / $100a143637f3f2f4$var$GRID_SIZE), this));\n        this.cellsByCol = this.groupCellsByColumn();\n        this.cellsByReversedCol = this.cellsByCol.map((col)=>[\n                ...col\n            ].reverse());\n        this.cellsByRow = this.groupCellsByRow();\n        this.cellsByReversedRow = this.cellsByRow.map((row)=>[\n                ...row\n            ].reverse());\n    }\n    getRandomEmptyCell() {\n        const emptyCells = this.cells.filter((cell)=>!cell.linkedTile);\n        const randomIndex = Math.floor(Math.random() * emptyCells.length);\n        return emptyCells[randomIndex];\n    }\n    groupCellsByColumn() {\n        return this.cells.reduce((groupedCells, cell)=>{\n            groupedCells[cell.x] = groupedCells[cell.x] || [];\n            groupedCells[cell.x][cell.y] = cell;\n            return groupedCells;\n        }, []);\n    }\n    groupCellsByRow() {\n        return this.cells.reduce((groupedCells, cell)=>{\n            groupedCells[cell.y] = groupedCells[cell.y] || [];\n            groupedCells[cell.y][cell.x] = cell;\n            return groupedCells;\n        }, []);\n    }\n    reset() {\n        document.querySelectorAll(\".field-tile\").forEach((tile)=>{\n            tile.remove();\n        });\n        this.cells.forEach((cell)=>{\n            cell.linkedTile = null;\n        });\n    }\n    updateTotalScore(score) {\n        this.lastMerge = score;\n        this.totalScore += score;\n    }\n}\n\n\nclass $ac0dd964ea674058$export$235cb65c20ad2b7 {\n    constructor(gridElement){\n        this.tileElement = document.createElement(\"div\");\n        this.tileElement.classList.add(\"field-tile\");\n        this.setValue(Math.random() > 0.1 ? 2 : 4);\n        gridElement.append(this.tileElement);\n    }\n    setXY(x, y) {\n        this.x = x;\n        this.y = y;\n        this.tileElement.style.setProperty(\"--x\", x);\n        this.tileElement.style.setProperty(\"--y\", y);\n    }\n    setValue(value) {\n        const prevValue = this.value;\n        this.value = value;\n        this.tileElement.textContent = value;\n        this.tileElement.classList.remove(`field-tile--${prevValue}`);\n        this.tileElement.classList.add(`field-tile--${value}`);\n    }\n    removeFromDOM() {\n        this.tileElement.remove();\n    }\n    waitForTransitionEnd(animation = false) {\n        return new Promise((resolve)=>{\n            this.tileElement.addEventListener(animation ? \"animationend\" : \"transitionend\", resolve, {\n                once: true\n            });\n        });\n    }\n}\n\n\n\"use strict\";\nconst $09e991522ca7e64e$var$buttonStart = document.querySelector(\"button\");\nconst $09e991522ca7e64e$var$gameBoard = document.getElementById(\"game-board\");\nconst $09e991522ca7e64e$var$grid = new (0, $100a143637f3f2f4$export$ef2184bd89960b14)($09e991522ca7e64e$var$gameBoard);\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\n$09e991522ca7e64e$var$buttonStart.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$buttonStart.classList.contains(\"restart\")) {\n        if (confirm(\"Are you sure you want to restart the game? All progress will be lost.\")) $09e991522ca7e64e$var$restartGame();\n    } else {\n        $09e991522ca7e64e$var$buttonStart.classList.remove(\"start\");\n        $09e991522ca7e64e$var$buttonStart.classList.add(\"restart\");\n        $09e991522ca7e64e$var$buttonStart.innerHTML = \"Restart\";\n        $09e991522ca7e64e$var$restartGame();\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n    }\n});\nfunction $09e991522ca7e64e$var$setupInput() {\n    document.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleInput, {\n        once: true\n    });\n}\nasync function $09e991522ca7e64e$var$handleInput(e) {\n    switch(e.key){\n        case \"ArrowUp\":\n            if (!$09e991522ca7e64e$var$canMoveUp()) {\n                $09e991522ca7e64e$var$setupInput();\n                return;\n            }\n            await $09e991522ca7e64e$var$moveUp();\n            break;\n        case \"ArrowDown\":\n            if (!$09e991522ca7e64e$var$canMoveDown()) {\n                $09e991522ca7e64e$var$setupInput();\n                return;\n            }\n            await $09e991522ca7e64e$var$moveDown();\n            break;\n        case \"ArrowLeft\":\n            if (!$09e991522ca7e64e$var$canMoveLeft()) {\n                $09e991522ca7e64e$var$setupInput();\n                return;\n            }\n            await $09e991522ca7e64e$var$moveLeft();\n            break;\n        case \"ArrowRight\":\n            if (!$09e991522ca7e64e$var$canMoveRight()) {\n                $09e991522ca7e64e$var$setupInput();\n                return;\n            }\n            await $09e991522ca7e64e$var$moveRight();\n            break;\n        default:\n            $09e991522ca7e64e$var$setupInput();\n            return;\n    }\n    $09e991522ca7e64e$var$grid.cells.forEach((cell)=>{\n        if (cell.linkedTileForMerge) cell.mergeTiles();\n    });\n    $09e991522ca7e64e$var$gameScore.textContent = $09e991522ca7e64e$var$grid.totalScore;\n    if ($09e991522ca7e64e$var$grid.lastMerge === 2048) {\n        $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n        return;\n    }\n    const newTile = new (0, $ac0dd964ea674058$export$235cb65c20ad2b7)($09e991522ca7e64e$var$gameBoard);\n    $09e991522ca7e64e$var$grid.getRandomEmptyCell().linkTile(newTile);\n    if (!$09e991522ca7e64e$var$canMoveUp() && !$09e991522ca7e64e$var$canMoveDown() && !$09e991522ca7e64e$var$canMoveLeft() && !$09e991522ca7e64e$var$canMoveRight()) {\n        newTile.waitForTransitionEnd(true).then(()=>{\n            $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n        });\n        return;\n    }\n    $09e991522ca7e64e$var$setupInput();\n}\nasync function $09e991522ca7e64e$var$moveUp() {\n    await $09e991522ca7e64e$var$slideTiles($09e991522ca7e64e$var$grid.cellsByCol);\n}\nasync function $09e991522ca7e64e$var$moveDown() {\n    await $09e991522ca7e64e$var$slideTiles($09e991522ca7e64e$var$grid.cellsByReversedCol);\n}\nasync function $09e991522ca7e64e$var$moveLeft() {\n    await $09e991522ca7e64e$var$slideTiles($09e991522ca7e64e$var$grid.cellsByRow);\n}\nasync function $09e991522ca7e64e$var$moveRight() {\n    await $09e991522ca7e64e$var$slideTiles($09e991522ca7e64e$var$grid.cellsByReversedRow);\n}\nfunction $09e991522ca7e64e$var$slideTiles(groupedCells) {\n    return Promise.all(groupedCells.flatMap((group)=>{\n        const promises = [];\n        for(let i = 0; i < group.length; i++){\n            if (!group[i].linkedTile) continue;\n            const cellWithTile = group[i];\n            let lastValidCell;\n            for(let j = i - 1; j >= 0; j--){\n                const moveToCell = group[j];\n                if (!moveToCell.canAccept(cellWithTile.linkedTile)) break;\n                lastValidCell = moveToCell;\n            }\n            if (lastValidCell) {\n                promises.push(cellWithTile.linkedTile.waitForTransitionEnd());\n                if (lastValidCell.linkedTile) lastValidCell.linkTileForMerge(cellWithTile.linkedTile);\n                else lastValidCell.linkTile(cellWithTile.linkedTile);\n                cellWithTile.linkedTile = null;\n            }\n        }\n        return promises;\n    }));\n}\nfunction $09e991522ca7e64e$var$canMoveUp() {\n    return $09e991522ca7e64e$var$canMove($09e991522ca7e64e$var$grid.cellsByCol);\n}\nfunction $09e991522ca7e64e$var$canMoveDown() {\n    return $09e991522ca7e64e$var$canMove($09e991522ca7e64e$var$grid.cellsByReversedCol);\n}\nfunction $09e991522ca7e64e$var$canMoveLeft() {\n    return $09e991522ca7e64e$var$canMove($09e991522ca7e64e$var$grid.cellsByRow);\n}\nfunction $09e991522ca7e64e$var$canMoveRight() {\n    return $09e991522ca7e64e$var$canMove($09e991522ca7e64e$var$grid.cellsByReversedRow);\n}\nfunction $09e991522ca7e64e$var$canMove(groupedCells) {\n    return groupedCells.some((group)=>{\n        return group.some((cell, index)=>{\n            if (index === 0) return false;\n            if (!cell.linkedTile) return false;\n            const targetCell = group[index - 1];\n            return targetCell.canAccept(cell.linkedTile);\n        });\n    });\n}\nfunction $09e991522ca7e64e$var$restartGame() {\n    $09e991522ca7e64e$var$grid.reset();\n    $09e991522ca7e64e$var$grid.totalScore = 0;\n    $09e991522ca7e64e$var$gameScore.textContent = $09e991522ca7e64e$var$grid.totalScore;\n    $09e991522ca7e64e$var$grid.getRandomEmptyCell().linkTile(new (0, $ac0dd964ea674058$export$235cb65c20ad2b7)($09e991522ca7e64e$var$gameBoard));\n    $09e991522ca7e64e$var$grid.getRandomEmptyCell().linkTile(new (0, $ac0dd964ea674058$export$235cb65c20ad2b7)($09e991522ca7e64e$var$gameBoard));\n    $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    if (!$09e991522ca7e64e$var$messageWin.classList.contains(\"hidden\")) $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$setupInput();\n}\n\n\n//# sourceMappingURL=index.dd122eac.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\n// const Game = require('../modules/Game.class');\n// const game = new Game();\n\n// Write your code here\n\nimport { Grid } from '../modules/grid.class.js';\nimport { Tile } from '../modules/tile.class.js';\n\nconst buttonStart = document.querySelector('button');\nconst gameBoard = document.getElementById('game-board');\nconst grid = new Grid(gameBoard);\n\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst messageStart = document.querySelector('.message-start');\n\nconst gameScore = document.querySelector('.game-score');\n\nbuttonStart.addEventListener('click', () => {\n  if (buttonStart.classList.contains('restart')) {\n    if (\n      confirm(\n        'Are you sure you want to restart the game? All progress will be lost.',\n      )\n    ) {\n      restartGame();\n    }\n  } else {\n    buttonStart.classList.remove('start');\n    buttonStart.classList.add('restart');\n    buttonStart.innerHTML = 'Restart';\n\n    restartGame();\n\n    messageStart.classList.add('hidden');\n  }\n});\n\nfunction setupInput() {\n  document.addEventListener('keydown', handleInput, { once: true });\n}\n\nasync function handleInput(e) {\n  switch (e.key) {\n    case 'ArrowUp':\n      if (!canMoveUp()) {\n        setupInput();\n\n        return;\n      }\n      await moveUp();\n      break;\n\n    case 'ArrowDown':\n      if (!canMoveDown()) {\n        setupInput();\n\n        return;\n      }\n      await moveDown();\n      break;\n\n    case 'ArrowLeft':\n      if (!canMoveLeft()) {\n        setupInput();\n\n        return;\n      }\n      await moveLeft();\n      break;\n\n    case 'ArrowRight':\n      if (!canMoveRight()) {\n        setupInput();\n\n        return;\n      }\n      await moveRight();\n      break;\n\n    default:\n      setupInput();\n\n      return;\n  }\n\n  grid.cells.forEach((cell) => {\n    if (cell.linkedTileForMerge) {\n      cell.mergeTiles();\n    }\n  });\n  gameScore.textContent = grid.totalScore;\n\n  if (grid.lastMerge === 2048) {\n    messageWin.classList.remove('hidden');\n\n    return;\n  }\n\n  const newTile = new Tile(gameBoard);\n\n  grid.getRandomEmptyCell().linkTile(newTile);\n\n  if (!canMoveUp() && !canMoveDown() && !canMoveLeft() && !canMoveRight()) {\n    newTile.waitForTransitionEnd(true).then(() => {\n      messageLose.classList.remove('hidden');\n    });\n\n    return;\n  }\n  setupInput();\n}\n\nasync function moveUp() {\n  await slideTiles(grid.cellsByCol);\n}\n\nasync function moveDown() {\n  await slideTiles(grid.cellsByReversedCol);\n}\n\nasync function moveLeft() {\n  await slideTiles(grid.cellsByRow);\n}\n\nasync function moveRight() {\n  await slideTiles(grid.cellsByReversedRow);\n}\n\nfunction slideTiles(groupedCells) {\n  return Promise.all(\n    groupedCells.flatMap((group) => {\n      const promises = [];\n\n      for (let i = 0; i < group.length; i++) {\n        if (!group[i].linkedTile) {\n          continue;\n        }\n\n        const cellWithTile = group[i];\n        let lastValidCell;\n\n        for (let j = i - 1; j >= 0; j--) {\n          const moveToCell = group[j];\n\n          if (!moveToCell.canAccept(cellWithTile.linkedTile)) {\n            break;\n          }\n          lastValidCell = moveToCell;\n        }\n\n        if (lastValidCell) {\n          promises.push(cellWithTile.linkedTile.waitForTransitionEnd());\n\n          if (lastValidCell.linkedTile) {\n            lastValidCell.linkTileForMerge(cellWithTile.linkedTile);\n          } else {\n            lastValidCell.linkTile(cellWithTile.linkedTile);\n          }\n          cellWithTile.linkedTile = null;\n        }\n      }\n\n      return promises;\n    }),\n  );\n}\n\nfunction canMoveUp() {\n  return canMove(grid.cellsByCol);\n}\n\nfunction canMoveDown() {\n  return canMove(grid.cellsByReversedCol);\n}\n\nfunction canMoveLeft() {\n  return canMove(grid.cellsByRow);\n}\n\nfunction canMoveRight() {\n  return canMove(grid.cellsByReversedRow);\n}\n\nfunction canMove(groupedCells) {\n  return groupedCells.some((group) => {\n    return group.some((cell, index) => {\n      if (index === 0) {\n        return false;\n      }\n\n      if (!cell.linkedTile) {\n        return false;\n      }\n\n      const targetCell = group[index - 1];\n\n      return targetCell.canAccept(cell.linkedTile);\n    });\n  });\n}\n\nfunction restartGame() {\n  grid.reset();\n  grid.totalScore = 0;\n  gameScore.textContent = grid.totalScore;\n\n  grid.getRandomEmptyCell().linkTile(new Tile(gameBoard));\n  grid.getRandomEmptyCell().linkTile(new Tile(gameBoard));\n\n  messageLose.classList.add('hidden');\n\n  if (!messageWin.classList.contains('hidden')) {\n    messageWin.classList.add('hidden');\n  }\n  setupInput();\n}\n","import { Cell } from './cell.class.js';\n\nconst GRID_SIZE = 4;\nconst TOTAL_CELLS = GRID_SIZE * GRID_SIZE;\n\nexport class Grid {\n  constructor(gridElement) {\n    this.cells = [];\n    this.totalScore = 0;\n\n    for (let i = 0; i < TOTAL_CELLS; i++) {\n      this.cells.push(\n        new Cell(gridElement, i % GRID_SIZE, Math.floor(i / GRID_SIZE), this),\n      );\n    }\n\n    this.cellsByCol = this.groupCellsByColumn();\n    this.cellsByReversedCol = this.cellsByCol.map((col) => [...col].reverse());\n    this.cellsByRow = this.groupCellsByRow();\n    this.cellsByReversedRow = this.cellsByRow.map((row) => [...row].reverse());\n  }\n\n  getRandomEmptyCell() {\n    const emptyCells = this.cells.filter((cell) => !cell.linkedTile);\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n\n    return emptyCells[randomIndex];\n  }\n\n  groupCellsByColumn() {\n    return this.cells.reduce((groupedCells, cell) => {\n      groupedCells[cell.x] = groupedCells[cell.x] || [];\n      groupedCells[cell.x][cell.y] = cell;\n\n      return groupedCells;\n    }, []);\n  }\n\n  groupCellsByRow() {\n    return this.cells.reduce((groupedCells, cell) => {\n      groupedCells[cell.y] = groupedCells[cell.y] || [];\n      groupedCells[cell.y][cell.x] = cell;\n\n      return groupedCells;\n    }, []);\n  }\n\n  reset() {\n    document.querySelectorAll('.field-tile').forEach((tile) => {\n      tile.remove();\n    });\n\n    this.cells.forEach((cell) => {\n      cell.linkedTile = null;\n    });\n  }\n\n  updateTotalScore(score) {\n    this.lastMerge = score;\n    this.totalScore += score;\n  }\n}\n","export class Cell {\n  constructor(gridElement, x, y, grid) {\n    const cell = document.createElement('div');\n\n    cell.classList.add('field-cell');\n    gridElement.append(cell);\n    this.x = x;\n    this.y = y;\n    this.grid = grid;\n  }\n\n  linkTile(tile) {\n    tile.setXY(this.x, this.y);\n    this.linkedTile = tile;\n  }\n\n  linkTileForMerge(tile) {\n    tile.setXY(this.x, this.y);\n    this.linkedTileForMerge = tile;\n  }\n\n  canAccept(newTile) {\n    return (\n      !this.linkedTile ||\n      (!this.linkedTileForMerge && this.linkedTile.value === newTile.value)\n    );\n  }\n\n  mergeTiles() {\n    const mergedValue = this.linkedTile.value + this.linkedTileForMerge.value;\n\n    this.linkedTile.setValue(mergedValue);\n\n    this.linkedTileForMerge.removeFromDOM();\n    this.linkedTileForMerge = null;\n\n    this.grid.updateTotalScore(mergedValue);\n\n    return (this.score += mergedValue);\n  }\n}\n","export class Tile {\n  constructor(gridElement) {\n    this.tileElement = document.createElement('div');\n    this.tileElement.classList.add('field-tile');\n    this.setValue(Math.random() > 0.1 ? 2 : 4);\n    gridElement.append(this.tileElement);\n  }\n\n  setXY(x, y) {\n    this.x = x;\n    this.y = y;\n\n    this.tileElement.style.setProperty('--x', x);\n    this.tileElement.style.setProperty('--y', y);\n  }\n\n  setValue(value) {\n    const prevValue = this.value;\n\n    this.value = value;\n    this.tileElement.textContent = value;\n    this.tileElement.classList.remove(`field-tile--${prevValue}`);\n    this.tileElement.classList.add(`field-tile--${value}`);\n  }\n\n  removeFromDOM() {\n    this.tileElement.remove();\n  }\n\n  waitForTransitionEnd(animation = false) {\n    return new Promise((resolve) => {\n      this.tileElement.addEventListener(\n        animation ? 'animationend' : 'transitionend',\n        resolve,\n        { once: true },\n      );\n    });\n  }\n}\n"],"names":["$3288372969523c40$export$f6f0c3fe4ec306ea","constructor","gridElement","x","y","grid","cell","document","createElement","classList","add","append","linkTile","tile","setXY","linkedTile","linkTileForMerge","linkedTileForMerge","canAccept","newTile","value","mergeTiles","mergedValue","setValue","removeFromDOM","updateTotalScore","score","$ac0dd964ea674058$export$235cb65c20ad2b7","tileElement","Math","random","style","setProperty","prevValue","textContent","remove","waitForTransitionEnd","animation","Promise","resolve","addEventListener","once","$09e991522ca7e64e$var$buttonStart","querySelector","$09e991522ca7e64e$var$gameBoard","getElementById","$09e991522ca7e64e$var$grid","cells","totalScore","i","$100a143637f3f2f4$var$GRID_SIZE","push","floor","cellsByCol","groupCellsByColumn","cellsByReversedCol","map","col","reverse","cellsByRow","groupCellsByRow","cellsByReversedRow","row","getRandomEmptyCell","emptyCells","filter","randomIndex","length","reduce","groupedCells","reset","querySelectorAll","forEach","lastMerge","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$setupInput","$09e991522ca7e64e$var$handleInput","e","key","$09e991522ca7e64e$var$canMoveUp","$09e991522ca7e64e$var$moveUp","$09e991522ca7e64e$var$canMoveDown","$09e991522ca7e64e$var$moveDown","$09e991522ca7e64e$var$canMoveLeft","$09e991522ca7e64e$var$moveLeft","$09e991522ca7e64e$var$canMoveRight","$09e991522ca7e64e$var$moveRight","then","$09e991522ca7e64e$var$slideTiles","all","flatMap","group","promises","lastValidCell","cellWithTile","j","moveToCell","$09e991522ca7e64e$var$canMove","some","index","targetCell","$09e991522ca7e64e$var$restartGame","contains","confirm","innerHTML"],"version":3,"file":"index.dd122eac.js.map"}